TODO

tests:
- login as user to publish question
- error if non logged in user tries to publish question
- create user who is expert and answer a question, that question should be marked as has answer by expert
- create normal user who answers question and that question should be marked a has *no* answer by expert
- check publishing answers and questions that trigger spam filters and that don't trigger spam filters
- voting up and down, and check only logged in users can do it

- document using RST, see scoops book

- Management commands to assign users to questions and answers and change categories for questions.
- link for edit question for user who published and for admin
- view for publishing question
- view for answering question
- redis and votes
- vote for answer (Django and ajax and redis)
- users with permissions can edit questions with any status, not only live
- javascript should go together with app, see static/js/main.js to get questions on yt project

-----

Long polling: http://www.quora.com/How-do-you-push-messages-back-to-a-web-browser-client-through-AJAX-Is-there-any-way-to-do-this-without-having-the-client-constantly-polling-the-server-for-updates

